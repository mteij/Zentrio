// PWABuilder Service Worker
// This service worker is generated by PWABuilder and is optimized for PWA functionality

const CACHE_NAME = 'zentrio-pwa-v8';
const RUNTIME_CACHE = 'zentrio-runtime-v8';

// URLs to cache during install
const STATIC_CACHE_URLS = [
  '/manifest.json',
  '/css/styles.css',
  '/css/background.css',
  '/icons/icon-192.png',
  '/icons/icon-512.png',
  '/screenshots/mobile-1.jpg',
  '/screenshots/mobile-2.jpg',
  '/screenshots/mobile-3.jpg'
];

importScripts('/shared/utils/idb.js');

let directoryHandle = null;

self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SET_DIRECTORY_HANDLE') {
    directoryHandle = event.data.handle;
  }
});

// Install event - cache essential resources
self.addEventListener('install', event => {
  event.waitUntil(
    caches.open(CACHE_NAME)
      .then(cache => {
        return cache.addAll(STATIC_CACHE_URLS);
      })
      .then(() => {
        return self.skipWaiting();
      })
  );
});

// Activate event - clean up old caches
self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(cacheNames => {
      return Promise.all(
        cacheNames.map(cacheName => {
          if (cacheName !== CACHE_NAME && cacheName !== RUNTIME_CACHE) {
            return caches.delete(cacheName);
          }
        })
      );
    }).then(() => {
      return self.clients.claim();
    }).then(() => {
      return get('download_directory_handle').then(handle => {
        if (handle) {
          directoryHandle = handle;
        }
      });
    })
  );
});

// Fetch event - serve from cache, fallback to network
self.addEventListener('fetch', event => {
  const url = new URL(event.request.url);

  if (url.pathname === '/download-video') {
    event.respondWith((async () => {
      if (!directoryHandle) {
        return new Response('No directory selected.', { status: 400 });
      }

      const videoUrl = url.searchParams.get('url');
      const fileName = url.searchParams.get('name') || 'video.mp4';

      if (!videoUrl) {
        return new Response('Missing video URL.', { status: 400 });
      }

      try {
        const response = await fetch(videoUrl);
        const fileHandle = await directoryHandle.getFileHandle(fileName, { create: true });
        const writable = await fileHandle.createWritable();
        await response.body.pipeTo(writable);
        return new Response('Download complete.', { status: 200 });
      } catch (error) {
        return new Response(`Download failed: ${error.message}`, { status: 500 });
      }
    })());
    return;
  }

  // Only handle requests for static assets
  const isStaticAsset = STATIC_CACHE_URLS.some(assetUrl => event.request.url.endsWith(assetUrl));
  if (!isStaticAsset) {
    return;
  }

  event.respondWith(
    caches.match(event.request).then(cachedResponse => {
      if (cachedResponse) {
        return cachedResponse;
      }

      // Create a new request object that can handle redirects
      return fetch(event.request).then(response => {
        // Do not cache redirected responses.
        if (response.redirected) {
          return response;
        }

        // Do not cache responses that are not successful.
        if (!response || response.status !== 200 || response.type !== 'basic') {
          return response;
        }

        // Clone the response for caching
        const responseToCache = response.clone();

        caches.open(RUNTIME_CACHE).then(cache => {
          cache.put(event.request, responseToCache);
        });

        return response;
      }).catch(() => {
        // Return offline fallback for navigation requests
        if (event.request.mode === 'navigate') {
          return caches.match('/');
        }
        
        // Return a basic offline response for other requests
        return new Response('Offline', {
          status: 408,
          statusText: 'Offline'
        });
      });
    })
  );
});

// Background sync for when the app comes back online
self.addEventListener('sync', event => {
  if (event.tag === 'background-sync') {
    event.waitUntil(
      // Add any background sync logic here
      console.log('Background sync triggered')
    );
  }
});

// Push notifications (if needed)
self.addEventListener('push', event => {
  if (event.data) {
    const data = event.data.json();
    
    event.waitUntil(
      self.registration.showNotification(data.title, {
        body: data.body,
        icon: '/icons/icon-192.png',
        badge: '/icons/icon-192.png',
        tag: 'zentrio-notification'
      })
    );
  }
});

// Notification click handler
self.addEventListener('notificationclick', event => {
  event.notification.close();
  
  event.waitUntil(
    clients.openWindow('/')
  );
});
