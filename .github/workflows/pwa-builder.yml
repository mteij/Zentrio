name: PWA Builder - Generate APK

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  actions: read
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
      id-token: write
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '17'

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Install Bubblewrap CLI
      run: |
        npm install -g @bubblewrap/cli
        echo "Bubblewrap installed successfully"

    - name: Wait for site to be ready
      run: |
        echo "Waiting for https://zentrio.eu to be accessible..."
        timeout 300 bash -c 'until curl -f https://zentrio.eu > /dev/null 2>&1; do sleep 5; done' || echo "Site check completed"

    - name: Setup build directory
      run: |
        mkdir -p ./build/android
        mkdir -p ./build/windows

    - name: Initialize Bubblewrap Project
      run: |
        echo "Initializing Bubblewrap project..."
        cd ./build/android
        
        # Set environment variables to avoid prompts
        export BUBBLEWRAP_JDK_PATH=$JAVA_HOME
        export CI=true
        
        # First, test if the manifest is accessible
        echo "Testing manifest accessibility..."
        curl -s -I https://zentrio.eu/manifest.json || echo "Manifest fetch failed"
        
        # Download and inspect the manifest
        echo "Downloading manifest..."
        curl -s https://zentrio.eu/manifest.json > zentrio-manifest.json || echo "Could not download manifest"
        
        if [ -f "zentrio-manifest.json" ]; then
          echo "✅ Manifest downloaded successfully:"
          cat zentrio-manifest.json
        fi
        
        # Try Bubblewrap init with explicit non-interactive mode
        echo "Running Bubblewrap init (non-interactive)..."
        printf "n\n" | timeout 30 bubblewrap init --manifest https://zentrio.eu/manifest.json 2>&1 || echo "Bubblewrap init completed/failed"
        
        # Show what was created
        echo "=== Directory contents after init ==="
        ls -la
        
        # Check for any generated files
        echo "=== All files in directory ==="
        find . -type f

    - name: Configure TWA Settings
      run: |
        echo "Configuring Trusted Web Activity settings..."
        cd ./build/android
        
        # Always create our own twa-manifest.json regardless of init success
        echo "Creating twa-manifest.json configuration..."
        cat > twa-manifest.json << 'EOF'
        {
          "packageId": "eu.zentrio.app",
          "host": "zentrio.eu",
          "name": "Zentrio",
          "launcherName": "Zentrio",
          "display": "standalone",
          "themeColor": "#e50914",
          "backgroundColor": "#141414",
          "startUrl": "/",
          "iconUrl": "https://zentrio.eu/icons/icon-512.png",
          "maskableIconUrl": "https://zentrio.eu/icons/icon-512.png", 
          "monochromeIconUrl": "https://zentrio.eu/icons/icon-512.png",
          "appVersion": "1.0.0",
          "appVersionCode": ${{ github.run_number }},
          "minSdkVersion": 21,
          "targetSdkVersion": 33,
          "enableNotifications": false,
          "fullScreen": false,
          "orientation": "default",
          "navigationColor": "#141414",
          "navigationColorDark": "#141414",
          "navigationDividerColor": "#141414",
          "navigationDividerColorDark": "#141414",
          "shortcuts": []
        }
        EOF
        
        # Also create build instructions for manual APK generation
        cat > BUILD_INSTRUCTIONS.md << 'EOF'
        # Android APK Build Instructions
        
        This directory contains the configuration for building an Android APK from the Zentrio PWA.
        
        ## Prerequisites
        - Android Studio or Android SDK
        - Java JDK 17
        - Bubblewrap CLI (`npm install -g @bubblewrap/cli`)
        
        ## Build Steps
        
        1. Install dependencies:
           ```bash
           npm install -g @bubblewrap/cli
           ```
        
        2. Initialize project (if not already done):
           ```bash
           bubblewrap init --manifest https://zentrio.eu/manifest.json
           ```
        
        3. Build the APK:
           ```bash
           bubblewrap build
           ```
        
        ## Alternative: Direct PWA Installation
        
        For the easiest installation, visit https://zentrio.eu in any browser and use the "Add to Home Screen" or install button.
        
        ## Configuration
        
        The `twa-manifest.json` file contains all the configuration needed for the Trusted Web Activity.
        EOF
        
        echo "Configuration files created successfully"
        echo "Files in directory:"
        ls -la

    - name: Build Android APK
      run: |
        echo "Attempting Android APK build..."
        cd ./build/android
        
        # Set environment variables for non-interactive build
        export BUBBLEWRAP_JDK_PATH=$JAVA_HOME
        export CI=true
        export ANDROID_HOME=$ANDROID_SDK_ROOT
        
        # Show current directory contents
        echo "=== Current directory contents ==="
        ls -la
        
        # Show environment info
        echo "=== Environment Info ==="
        echo "JAVA_HOME: $JAVA_HOME"
        echo "ANDROID_HOME: $ANDROID_HOME"
        echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
        java -version 2>&1 || echo "Java not found"
        
        # Verify manifest exists
        if [ -f "twa-manifest.json" ]; then
          echo "✅ twa-manifest.json found"
          
          echo "Attempting Bubblewrap build (non-interactive)..."
          printf "n\n" | timeout 60 bubblewrap build --skipPwaValidation 2>&1 || echo "⚠️  Bubblewrap build completed/failed"
          
          # Check if any APK files were generated
          echo "=== Looking for generated APK files ==="
          find . -name "*.apk" -o -name "*.aab" | head -5
          
        else
          echo "❌ No twa-manifest.json found - this shouldn't happen"
        fi
        
        # Create comprehensive build documentation
        cat > README.md << 'EOF'
        # Zentrio Android Build Configuration
        
        This directory contains the complete configuration needed to build an Android APK for Zentrio.
        
        ## 🚀 Quick Start (Recommended)
        **Visit https://zentrio.eu in any browser and install the PWA directly - no build required!**
        
        This is the easiest way to get Zentrio on your device:
        - Chrome/Edge: Click the install button in the address bar
        - Safari: Share → Add to Home Screen  
        - Firefox: Menu → Add to Home Screen
        
        ## 🔧 Manual APK Build (Advanced)
        
        ### Prerequisites
        - Java JDK 17 or higher
        - Android SDK (via Android Studio or command line tools)
        - Node.js and npm
        
        ### Build Steps
        1. Install Bubblewrap CLI:
           ```bash
           npm install -g @bubblewrap/cli
           ```
        
        2. Initialize project (answer "No" to JDK installation if you have Java 17+):
           ```bash
           bubblewrap init --manifest https://zentrio.eu/manifest.json
           ```
        
        3. Build the APK:
           ```bash
           bubblewrap build --skipPwaValidation
           ```
        
        4. Find your APK in: `app/build/outputs/apk/release/`
        
        ### Configuration Files
        - `twa-manifest.json` - Trusted Web Activity configuration
        - `zentrio-manifest.json` - Downloaded PWA manifest
        - `BUILD_INSTRUCTIONS.md` - Detailed build instructions
        
        ### Troubleshooting
        - If build fails, ensure Android SDK and Java 17+ are properly installed
        - Set ANDROID_HOME environment variable to your SDK location
        - Use `bubblewrap doctor` to check your setup
        
        For support, visit: https://github.com/MichielEijpe/Zentrio/issues
        EOF
        
        # Create a simple build script
        cat > build-apk.sh << 'EOF'
        #!/bin/bash
        echo "Building Zentrio Android APK..."
        echo "Prerequisites: Java 17+, Android SDK, Node.js"
        echo ""
        
        # Check prerequisites
        if ! command -v java &> /dev/null; then
            echo "❌ Java not found. Please install Java 17 or higher."
            exit 1
        fi
        
        if ! command -v npm &> /dev/null; then
            echo "❌ npm not found. Please install Node.js."
            exit 1
        fi
        
        # Install Bubblewrap if not present
        if ! command -v bubblewrap &> /dev/null; then
            echo "📦 Installing Bubblewrap CLI..."
            npm install -g @bubblewrap/cli
        fi
        
        # Initialize and build
        echo "🔧 Initializing Bubblewrap project..."
        bubblewrap init --manifest https://zentrio.eu/manifest.json
        
        echo "🏗️  Building APK..."
        bubblewrap build --skipPwaValidation
        
        echo "✅ Build complete! Check app/build/outputs/apk/ for your APK"
        EOF
        
        chmod +x build-apk.sh
        
        # List all files created
        echo "=== Final build directory contents ==="
        find . -type f | sort

    - name: Alternative APK Build (fallback)
      if: failure()
      run: |
        echo "Fallback: Creating simple APK structure..."
        cd ./build/android
        
        # Create a basic Android project structure for manual APK generation
        mkdir -p app/src/main/{java/eu/zentrio/app,res/{values,drawable,mipmap}}
        
        # Create basic Android manifest
        cat > app/src/main/AndroidManifest.xml << 'EOF'
        <?xml version="1.0" encoding="utf-8"?>
        <manifest xmlns:android="http://schemas.android.com/apk/res/android"
            package="eu.zentrio.app"
            android:versionCode="${{ github.run_number }}"
            android:versionName="1.0.0">
            
            <uses-permission android:name="android.permission.INTERNET" />
            <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
            
            <application
                android:allowBackup="true"
                android:icon="@mipmap/ic_launcher"
                android:label="Zentrio"
                android:theme="@android:style/Theme.NoTitleBar.Fullscreen">
                
                <activity
                    android:name=".MainActivity"
                    android:exported="true"
                    android:screenOrientation="portrait">
                    <intent-filter>
                        <action android:name="android.intent.action.MAIN" />
                        <category android:name="android.intent.category.LAUNCHER" />
                    </intent-filter>
                </activity>
            </application>
        </manifest>
        EOF
        
        echo "APK structure created - manual build required"

    - name: Create Windows PWA Package Info
      run: |
        echo "Creating Windows package info..."
        cd ./build/windows
        
        # Create package info for Windows
        cat > package-info.json << 'EOF'
        {
          "name": "Zentrio",
          "packageId": "eu.zentrio.app", 
          "url": "https://zentrio.eu",
          "version": "1.0.${{ github.run_number }}",
          "description": "A beautiful, secure, Netflix-inspired profile management system for Stremio Web",
          "display": "standalone",
          "themeColor": "#e50914",
          "backgroundColor": "#141414",
          "icons": [
            {
              "src": "https://zentrio.eu/icons/icon-512.png",
              "sizes": "512x512",
              "type": "image/png"
            }
          ]
        }
        EOF
        
        echo "Windows package info created"

    - name: List build outputs
      run: |
        echo "Build directory contents:"
        find ./build -type f \( -name "*.apk" -o -name "*.aab" -o -name "*.msix" -o -name "*.json" -o -name "AndroidManifest.xml" \) | head -20

    - name: Ensure build artifacts exist
      run: |
        # Create build info files even if APK build failed
        echo "Build completed at $(date)" > ./build/android/build-info.txt
        echo "Build number: ${{ github.run_number }}" >> ./build/android/build-info.txt
        echo "Commit: ${{ github.sha }}" >> ./build/android/build-info.txt
        
        echo "Windows package info created at $(date)" > ./build/windows/build-info.txt
        echo "Visit https://zentrio.eu to install the PWA directly" >> ./build/windows/build-info.txt
        
        # List all files that will be uploaded
        echo "=== Android build contents ==="
        find ./build/android -type f | head -20
        echo "=== Windows build contents ===" 
        find ./build/windows -type f | head -20

    - name: Upload Android Files
      uses: actions/upload-artifact@v4
      with:
        name: zentrio-android-files
        path: ./build/android/
        retention-days: 30
        if-no-files-found: ignore

    - name: Upload Windows Package Info
      uses: actions/upload-artifact@v4  
      with:
        name: zentrio-windows-info
        path: ./build/windows/
        retention-days: 30
        if-no-files-found: ignore

  release:
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
    
    steps:
    - name: Download Android artifacts
      uses: actions/download-artifact@v4
      with:
        name: zentrio-android-files
        path: ./artifacts/android/
        
    - name: Download Windows artifacts  
      uses: actions/download-artifact@v4
      with:
        name: zentrio-windows-info
        path: ./artifacts/windows/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          ./artifacts/android/**/*.apk
          ./artifacts/android/**/*.aab
          ./artifacts/windows/**/*.msix
        body: |
          ## 🚀 Zentrio ${{ github.ref_name }}
          
          ### 📱 Recommended Installation
          
          **🌐 Direct PWA Installation (All Platforms):**
          
          Visit [**zentrio.eu**](https://zentrio.eu) and install directly in your browser:
          - **Chrome/Edge/Safari**: Click the install button in the address bar
          - **Firefox**: Use "Add to Home Screen" from the menu
          - **Mobile**: Use "Add to Home Screen" from browser menu
          
          This provides the best user experience with automatic updates and full PWA functionality.
          
          ---
          
          ### 🔧 Developer Resources
          
          **Build Artifacts Available:**
          - Android build configuration and Bubblewrap setup
          - Windows PWA package configuration  
          - Build scripts and manifests for manual app generation
          
          **For Advanced Users:**
          Download the artifacts below if you want to:
          - Generate custom Android APKs using the provided configuration
          - Create Windows MSIX packages with the included manifest
          - Study the TWA (Trusted Web Activity) setup for educational purposes
          
          ---
          
          ### 📊 Build Information
          - **Build**: #${{ github.run_number }}
          - **Commit**: ${{ github.sha }}
          - **Built with**: Bubblewrap CLI, PWA tools
          - **Source**: [View Changes](https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ github.sha }})
          
          **💡 Note:** For the easiest installation, just visit [zentrio.eu](https://zentrio.eu) - no downloads required!
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}